{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HANCESTRO Ontology Documentation","text":"<p>Welcome to the HANCESTRO documentation!</p> <p>The Human Ancestry Ontology (HAncestro) provides a systematic description of the ancestry concepts used in the NHGRI-EBI Catalog of published genome-wide association studies.  It includes a list of countries, regions and major areas (essentially continents), as well as a fairly exhaustive list of defined ancestral categories, uncategorised ancestral categories and population isolates.</p> <p>The following HANCESTRO release files are provided </p> <ul> <li>hancestro.owl - full pre-reasoned version of HANCESTRO wtih all imports fitted into the BFO upper hierarchy</li> <li>hancestro-full.owl - same as <code>hancestro.owl</code></li> <li>hancestro-base.owl - base version of HANCESTRO with only native axioms and no imports</li> </ul> <p>Please see our FAQ. for some more information.</p> <p>You can find descriptions of the standard ontology engineering workflows here.</p>"},{"location":"#whats-the-difference-between-ancestry-and-ethnicity","title":"What's the difference between ancestry and ethnicity?","text":"<p>Ancestry generally refers to an individual's objectivily verifiable genetic background, which can be clustered with reference populations from a certain region. Ethnicity on the other hand refers to an individual's self-identified cultural background. Most individuals have a strong alignment between their ancestry and ethnicity but it is possible for an individual to associate with an ethnic background that is not aligned with their genetic ancestry, for example due to gaps or misrepresentations in their family history.</p> <p>For more information, see Mersha &amp; Abebe, 2015 or https://health.clevelandclinic.org/how-your-ancestry-and-ethnicity-affect-your-health/</p> <p>Ancestry categories in the Human Ancestry Ontology refer to genetic ancestry and have been defined in this context. They may also be used to annotate self-reported ethnicity data but with the clear caveat that annotation does not guarantee the accuracy of related genetic information. </p> <p>As of release v2024-04-25, we provide a new <code>ethnicity category (HANCESTRO:0601)</code> classification that groups together all terms that can be used to describe self-reported ethnicities. We also have a grouping called <code>geography-based population category (HANCESTRO:0602)</code>, for all population descriptors related to geography.</p>"},{"location":"#hancestro-root-level-concepts","title":"HANCESTRO root level concepts","text":""},{"location":"#ancestry-category","title":"Ancestry category","text":"<p>The key purpose of HANCESTRO is the capture of the primary ancestry categories defined in Morales et al, 2018. Where additional genetic information for a smaller population category (eg by country) is available to assign it to one of the defined ancestry categories, this is also represented in the ontology hierarchy. However a lot of country-based categories are either uncategorised, ie the available ancestry information does not fall into one of the defined categories or they are undefined, ie insufficient information is available to allocate this population to a specific ancestral group.</p> <p>The primary asserted relationship between ancestry categories and countries is via the <code>isDemonymOf</code> relationship, which identifies that individuals may be residents or natives of a particular place but makes no assertion regarding their genetic background.</p> <p>In exceptional cases, ancestry categories are associated with countries via the <code>hasCountryOfOrigin</code> relationship. This is much more formal definition generally reserved for genetically isolated populations where objectively verifiable information is available to relate individuals from this population to a small geographic area within a certain country.</p> <p>UPDATE: As of release v20205-04-01, the labels for all root level ancestry categories includes the suffix <code>ancestry</code>. This is due to a use case-driven creation of equiavlent ethnicity-specific terms for some of these categories, e.g. there are now separate ancestry and ethnicity categories for <code>East Asian ancestry (HANCESTRO:0009)</code> and <code>East Asian (HANCESTRO:0849)</code>. The usage guidance for ancestry and ethnicity categories remains the same.</p>"},{"location":"#ethnicity-category","title":"Ethnicity category","text":"<p>Many population descriptors do not fully match defined ancestry populations although individuals from these populations may show some levels of genetic similarity with a given ancestry category. Ethnicity descriptors are more likely to describe populations groups with a similar cultural, religious, tribal, geographic or other social background. This includes terms such as <code>Jewish Israeli</code>, <code>Punjabi Sikh</code> or <code>Hispanic</code>. </p> <p>In order to make HANCESTRO more broadly useful for the annotation of both self-reported information, usually referred to as <code>self-reported ethnicity</code> as well as genetic ancestry inferred from the similarity of individuals' sequence data to reference populations, we created a new <code>ethicity category (HANCESTRO:0601)</code>. This is a grouping class for all terms in HANCESTRO used to describe populations for which no genetic reference population is available and that are also not geographic descriptors. </p>"},{"location":"#geography-based-population-category","title":"Geography-based population category","text":"<p>One common way to describing individuals is by reference to the location where they were born, where they live or where their family origniated, such as national or regional demonyms. Demonyms are used to designate all people in relation to a particular place, regardless of ethnic, linguistic, religious or other cultural considerations.</p> <p>In order to make it easier for HANCESTRO users to identify all geographical descriptors, we implemented a new <code>geography-based population category (HANCESTRO:0602)</code> that groups all country and regional demonyms.   </p> <p>NOTE</p> <p>Please note that we make every effort to ensure that our ethnicity and geograph-based population descriptors groupings are non-overlapping, i.e. each term should only appear in one list. For this reason, you may sometimes find a geographic descriptor in the ethnicities list, in particular if that descriptor has child terms that are themselves not geographic descriptors. </p>"},{"location":"#reference-population","title":"Reference population","text":"<p>Reference populations consist of groups of individuals from a common geographic area and tribal or ethnolinguistic group whose DNA was sampled and sequenced as part of a large-scale genomic diversity project such as the 1000 Genomes Project, the Human Genome Diversity Project (HGDP) or Simons Genome Diversity Project (SGDP). All populations listed in HANCESTRO were identified from the International Genome Sample Resource (IGSR).</p> <p>A list of all reference populations included in HANCESTRO and their mapping to HANCESTRO ancestry categories and ethncities is available in tabular format here.</p>"},{"location":"#other-core-concepts-in-hancestro","title":"Other core concepts in HANCESTRO","text":""},{"location":"#ancestry-status","title":"Ancestry status","text":"<p>This class represents the general characterisation of the ancestry of a population or individual. Ancestry status can either be admixed or genetically isolated.</p>"},{"location":"#continent","title":"Continent","text":"<p>Formally defined major geographic area.</p>"},{"location":"#country","title":"Country","text":"<p>Defined geographic area, generally corresponding to an independent state or nation.</p>"},{"location":"#region","title":"Region","text":"<p>Convenience grouping of geographic areas larger than countries but smaller than continents. Regions may not have formal geographic definitions.</p>"},{"location":"#african-populations-in-hancestro","title":"African populations in HANCESTRO","text":"<p>As of release v2023-06-21, HANCESTRO defers to the African Population Ontology (AfPO), produced as part of the H3ABioNet project, on virtually all terminology relating to African populations. We import all population terms created by AfPO and include them in our hierarchy underneath our continental ancestry term <code>African (HANCESTRO:0010)</code>. Existing HANCESTRO terms such as <code>Masaai (HANCESTRO:0593)</code> or <code>Somali (HANCESTRO:0518)</code> have been deprecated in favour of their AfPO equivalents. The only exception to this scenario is for African national demonyms such as <code>Gambian (HANCESTRO:0535)</code> or <code>Nigerian (HANCESTRO:0544)</code>, which do not relate to a specific population group as defined in the context of the AfPO. We will maintain these terms in HANCESTRO for reasons of backwards compatibility. </p> <p>AfPO terms can easily be identified by their AfPO identifiers (<code>AfPO:0000000</code> or <code>http://purl.obolibrary.org/obo/AfPO_0000000</code>). For any queries, concerns, bug reports, change or new term requests about African populations, please raise an issue on the AfPO Github Tracker directly.</p>"},{"location":"cite/","title":"How to cite HANCESTRO","text":"<p>We are working on a dedicated publication about HANCESTRO. In the mean time, please cite: </p> <p>Joannella Morales, Danielle Welter, Emily H. Bowler, Maria Cerezo, Laura W. Harris, Aoife C. McMahon, Peggy Hall, Heather A. Junkins, Annalisa Milano, Emma Hastings, Cinzia Malangone, Annalisa Buniello, Tony Burdett, Paul Flicek, Helen Parkinson, Fiona Cunningham, Lucia A. Hindorff and Jacqueline A. L. MacArthur. A standardized framework for representation of ancestry data in genomics studies, with application to the NHGRI-EBI GWAS Catalog. Genome Biology, 2018, 19:21</p> <p>To reference a specific version of the ontology, please provide a link to this GITHUB repo, including the tag for the version you downloaded and the date of the download.</p>"},{"location":"contributing/","title":"How to contribute to HANCESTRO","text":""},{"location":"contributing/#before-you-write-a-new-request-please-consider-the-following","title":"Before you write a new request, please consider the following:","text":"<ul> <li>Does the term already exist? Before submitting suggestions for new ontology terms, check whether the term exist, either as a primary term or a synonym term. You can search using OLS</li> </ul>"},{"location":"contributing/#guidelines-for-creating-github-tickets-with-contributions-to-the-ontology","title":"Guidelines for creating GitHub tickets with contributions to the ontology:","text":"<ol> <li> <p>Write a detailed request: Please be specific and include as many details as necessary, providing background information, and if possible, suggesting a solution. HANCESTRO editors will be better equipped to address your suggestions if you offer details regarding 'what is wrong', 'why', and 'how to fix it'.</p> </li> <li> <p>Provide examples and references: Please include PMIDs for new term requests, and include also screenshots, or URLs illustrating the current ontology structure for other types of requests. </p> </li> <li> <p>For new term request: Be sure to provide suggestions for label (name), definition, references, position in hierarchy, etc.</p> </li> <li> <p>For updates to relationships: Provide details of the current axioms, why you think they are wrong or not sufficient, and what exactly should be added or removed.</p> </li> </ol> <p>On behalf of the HANCESTRO editorial team, Thanks!</p>"},{"location":"faq/","title":"HANCESTRO FAQ","text":""},{"location":"faq/#how-should-i-cite-hancestro","title":"How should I cite HANCESTRO?","text":"<p>Please cite Joannella Morales, Danielle Welter, Emily H. Bowler, Maria Cerezo, Laura W. Harris, Aoife C. McMahon, Peggy Hall, Heather A. Junkins, Annalisa Milano, Emma Hastings, Cinzia Malangone, Annalisa Buniello, Tony Burdett, Paul Flicek, Helen Parkinson, Fiona Cunningham, Lucia A. Hindorff and Jacqueline A. L. MacArthur. A standardized framework for representation of ancestry data in genomics studies, with application to the NHGRI-EBI GWAS Catalog. Genome Biology, 2018, 19:21</p> <p>To reference a specific version of the ontology, please provide a link to this GITHUB repo, including the tag for the version you downloaded and the date of the download.</p>"},{"location":"faq/#is-hancestro-actively-maintained","title":"Is HANCESTRO actively maintained?","text":"<p>Yes, HANCESTRO is actively maintained. </p>"},{"location":"faq/#how-often-is-hancestro-released","title":"How often is HANCESTRO released?","text":"<p>HANCESTRO is released whenever new terms have been added, although generally no more than once a month.</p>"},{"location":"faq/#how-can-i-request-new-terms","title":"How can I request new terms?","text":"<p>Please use our Github tracker to request new terms. Please provide as much information as possible, including - label (name) of the new term - definition - for new ancestry groups, please provide links to at least 2 scientific publications referencing and describing the ancestry group in question - the preferred parent term</p>"},{"location":"faq/#how-should-i-use-hancestro-terms-to-annotate-my-data","title":"How should I use HANCESTRO terms to annotate my data?","text":"<p>HANCESTRO terms can be used like any other ontology terms to annotate and map ancestry and country information in data records. Most major ancestral groups are covered in HANCESTRO and new terms can be requested as described above. </p>"},{"location":"faq/#complex-and-admixed-ancestries","title":"Complex and admixed ancestries","text":"<p>For complex ancestral backgrounds that do not fit any individual ancestral groups but rather represent a novel admixture of the component groups, we recommend using multiple terms to accurately describe the different ancestry groups, in combination with the term <code>admixed ancestry</code> (HANCESTRO:0306). Some admixed ancestral groups, such as Hispanic-Latin American are well-described and are therefore captured in a single HANCESTRO term, but it would not be possible, nor appropriate, to explicitly describe every possible combination of admixture.</p>"},{"location":"faq/#representing-the-genetic-ancestry-of-individual-samples","title":"Representing the genetic ancestry of individual samples","text":"<p>Where the representation of the genetic ancestry of individual samples is deemed to be relevant in the context of a study or publication, we recommend using a representation like that one in table 1. Here, each sample is represented as a percentage of overlap with its component major ancestry populations (<code>European_Genetic_Ancestry, African_Genetic_Ancestry, American_Indigenous_Genetic_Ancestry</code>), then allocated to a continental-level ancestry category (<code>Ancestry_category</code>). Ancestry sub- and sub-sub-categories from HANCESTRO can be added based on available metadata for the samples (<code>Ancestry_sub_category, Ancestry_sub_sub_category</code>), e.g. in this instance, samples were known to be collected from South American indigenous populations.</p> <p>Data and format kindly provided by the LatinCells team at the Laboratory of Human Evolutionary Genomics and Populations in the Advanced Genomics Unit of the Center for Research and Advanced Studies of the National Polytechnic Institute (Cinvestav) in Mexico.</p> European_Genetic_Ancestry African_Genetic_Ancestry American_Indigenous_Genetic_Ancestry Ancestry_category Ancestry_sub_category Ancestry_sub_sub_category sample 0.410633 0.071241 0.518126 Latin American Mexican Mexican CONTROL_ 0.411043 0.070131 0.518826 Latin American Mexican Mexican CONTROL_CD 0.00001 0.00001 0.99998 Indigenous American Indigenous in South America Piapoco LCCO0001 0.228382 0.017444 0.754175 Indigenous American Indigenous in South America Piapoco LCCO0004 0.00001 0.00001 0.99998 Indigenous American Indigenous in South America Piapoco LCCO0005 0.23886 0.021708 0.739432 Indigenous American Indigenous in South America Piapoco LCCO0006 0.114575 0.008043 0.877383 Indigenous American Indigenous in South America Pastos LCCO0023 0.047826 0.00001 0.952164 Indigenous American Indigenous in South America Pastos LCCO0024 0.238528 0.014825 0.746647 Indigenous American Indigenous in South America Pastos LCCO0044 0.472874 0.025367 0.501759 Indigenous American Indigenous in South America Pastos LCCO0052 0.006402 0.025769 0.967829 Indigenous American Indigenous in South America Wayuu LCCO0055 0.00001 0.00001 0.99998 Indigenous American Indigenous in South America Wayuu LCCO0061 0.0569 0.036398 0.906702 Indigenous American Indigenous in North America Maya LCMX0014 0.034926 0.005596 0.959479 Indigenous American Indigenous in North America Maya LCMX0016 0.21016 0.034721 0.755119 Indigenous American Indigenous in North America Maya LCMX0020 0.00001 0.00001 0.99998 Indigenous American Indigenous in North America Maya LCMX0021 0.201236 0.04455 0.754214 Indigenous American Indigenous in North America Otomi LCMX0158 0.047861 0.031195 0.920943 Indigenous American Indigenous in North America Otomi LCMX0159 0.071487 0.019162 0.909351 Indigenous American Indigenous in North America Otomi LCMX0160 <p>Table 1: Suggested representation of genetic ancestry of samples.</p>"},{"location":"faq/#what-do-the-reference-populations-in-hancestro-mean","title":"What do the reference populations in HANCESTRO mean?","text":"<p>Researchers commonly use reference populations such as those catalogued by the International Genome Sample Resource (IGSR) to assess the genetic ancestry of their samples through ancestry principal component analysis. In many cases there is no direct alignment between these reference populations and HANCESTRO terms, which can make it difficult for researchers to correctly annotate their data, for example when submitting to a resource that uses HANCESTRO for annotations. For this reason, we decided to include the full list of populations from the IGSR in HANCESTRO and link them to our continental and sub-continental ancestry categories as well as, where possible, indicate the overlap with ethncities captured in HANCESTRO. Please note that the representation of ethnicities in HANCESTRO is an ongoing process, and overlaps with reference populations will be updated as new ethnicities are added to the ontology.</p> <p>Special note on ancestry mappings for populations from the Simons Genome Diversity Project (SGDP): as discussed in Mallick et al., in particular in Extended Data Figure 3: ADMIXTURE analysis, the authors carried out unsupervised ADMIXTURE analysis over the 300 SGDP individuals, with ancestral population threshold from K=2 to K=12. While the project assigned to their populations to one of 7 continental ancestry groups, these groups do not directly align with the HANCESTRO ancestry populations, in particular the populations <code>Central Asia and Siberia (SGDP)</code> and <code>West Eurasia (SGDP)</code>. We used the aforementioned Extended Data Figure 3 in combination with our existing HANCESTRO hierarchy to infer the closest HANCESTRO ancestry group for each population where a direct equivalence did not exist. We would welcome feedback from users on these inferences, in particular    </p> <p>For our users' convenience, the mappings are also provided in tabular format here.</p>"},{"location":"faq/#whats-the-difference-between-ancestry-and-ethnicity","title":"What's the difference between ancestry and ethnicity?","text":"<p>The concepts of ancestry, ethnicity and race are often used interchangeably and there are sensitivities surrounding these topics. Here, we refer to ancestry for the purpose of describing the genetic background of individuals or populations, while ethnicity refers more to a socio-cultural context. As per Table 2 of Morales et al., ancestry of participants in genomic studies should ideally by confirmed using genomic methods such as principle component analysis to confirm self-reported ancestries.</p> <p>As of release v2024-04-25, we provide a new <code>ethnicity category (HANCESTRO:0601)</code> classification that groups together all terms that can be used to describe self-reported ethnicities. We also have a grouping called <code>geography-based population category (HANCESTRO:0602)</code>, for all population descriptors related to geography.</p>"},{"location":"faq/#why-should-i-use-hancestro-rather-than-ncit-or-another-ontology","title":"Why should I use HANCESTRO rather than NCIt or another ontology?","text":"<p>The ancestry groups in HANCESTRO have been carefully defined in a single hierarchy based on available population genomic information, to aid in the annotation and classification of ancestry information, particularly but not exclusively, in genomic studies. In NCIt, ancestry-related concepts are located under different parent terms, in the wider hierarchy of <code>Population Group</code> (NCIT:C17005), which can complicate querying and annotation restrictions. The majority of ancestry-related concepts are also grouped under the parent term <code>Race</code> (NCIT:C17049), which not only as a concept carries negative cultural associations but also in this particular case has a definition that is not exclusively limited to human subjects. It would therefore be preferable to annotated human data with clearly human-specific terminology.</p> <p>NCIt also does not distinguish categories such as uncategorised populations (populations for which specific ancestry information is known but that do no fall into any of the defined wider categories such African, Asian or European), undefined ancestry populations (populations that are too diverse or which insufficient information is available to allocate them to one of the wider categories) and genetically isolated or <code>founder</code> populations (populations with increased genetic homogeneity and reduced genetic variation due to cultural or geographic isolation).</p> <p>HANCESTRO terms are reused in several other ontologies, including EFO, FOODON and GENEPIO. The ontology is used to annotate information in projects and catalogues like the GWAS Catalog, the ENCODE project and the Human Cell Atlas.</p>"},{"location":"ontology_patterns/","title":"HANCESTRO design patterns","text":""},{"location":"ontology_patterns/#hancestro-native-object-properties","title":"HANCESTRO native object properties","text":"<p>HANCESTRO defines 4 native object properties:</p> <ul> <li>hasAncestryStatus (HANCESTRO:0301)</li> <li>hasCountryOfOrigin (HANCESTRO:0308)</li> <li>isDemonymOf (HANCESTRO:0330)</li> <li>hasDemonym (HANCESTRO:0329)</li> </ul> <p>In addition, it uses several imported properties:</p> <ul> <li>has quality (RO:0000086)</li> <li>located in (RO:0001025)</li> <li>part of (BFO:0000050)</li> <li>partially overlaps (RO:0002151)</li> </ul>"},{"location":"ontology_patterns/#defined-classes","title":"Defined classes","text":""},{"location":"ontology_patterns/#ancestry-status","title":"Ancestry status","text":"<p><code>ancestry status</code> is defined as being equivalent to <code>genetically isolated ancestry or admixed ancestry</code>. It is a grouping class for population genetics qualifiers.</p>"},{"location":"ontology_patterns/#ethnicity-category","title":"Ethnicity category","text":"<p><code>ethnicity category</code>is defined as being equivalent to <code>has quality some ethnicity descriptor</code>. This means that any subclass of <code>ethnicity category</code> has an inherent quality of being a descriptor of type ethnicity.</p>"},{"location":"ontology_patterns/#geography-based-population-category","title":"Geography-based population category","text":"<p><code>geography-based population category</code>is defined as being equivalent to <code>(isDemonymOf some Country) or (has quality some geographic descriptor)</code>. This means that any subclass of <code>geography-based population category</code> is either directly identified as a denomym of a country identified in the ontology or it has an inherent quality of being a descriptor of type geography.</p>"},{"location":"ontology_patterns/#exclusions-from-ethnicity-and-geography-descriptors","title":"Exclusions from ethnicity and geography descriptors","text":"<p>Please note that while continental- and regional-level ancestry descriptors such as <code>European</code> or <code>East Asian</code> qualify as geographic descriptors, these have been excluded from this classifcation due to the strict inheritance rules of ontology classification. In an ontology, any property that applies to a parent class also applies to all its children, so declaring <code>European</code> a geographic descriptor would automatically classify any of its children as geographic descriptors. The same applies to any class with many subclasses that would qualify as an ethnicity descriptor. </p> <p>We have therefore made the decision to apply the ethnicity and geographic descriptor qualities only to classes which have no or very few subclasses, and in the latter case only if the classification is universally applicable to the subclasses as well. As a result, some geographic labels such as <code>Malagasy</code> are not found among the geographic descriptors.</p> <p>Additionally, many descriptors may be applicable as both a geographic and an ethnicity descriptor. However, in line with the recommendations of the NASEM report on population descriptors, we decided to avoid mixing descriptors and have therefore excluded geographic descriptors from the ethnicity classification. Any inconsistencies in applying this rule are the result of human error and we welcome feedback from our users if you spot any errors.</p>"},{"location":"ontology_patterns/#other-design-patterns","title":"Other design patterns","text":""},{"location":"ontology_patterns/#links-between-populations","title":"Links between populations","text":"<p>We use the patterns</p> <p><code>partially overlaps some &lt;population&gt;</code> </p> <p>to create links between certain populations, e.g. between ethnic groups and nationalities in cases where a substantial part of a group is known to have this nationality. We also use the property to link reference populations to their closest ethnicities. </p>"},{"location":"ontology_patterns/#country-region-links","title":"Country-region links","text":"<p>Where possible, we create a link between each country and the sub-continental region it is part of using the pattern</p> <p><code>located in only &lt;region&gt;</code></p> <p>Where a country spans multiple regions, we aim to list all of them. The reason for this axiomatisation is to enable queries by region, such as \"Give me all countries located in Eastern Asia\".</p> <p>We acknowledge that the use of <code>only</code> in OWL axioms is not optimal and are actively looking into alternative design patterns. </p>"},{"location":"ontology_patterns/#region-continent-links","title":"Region-continent links","text":"<p>For similar reasons as for the country-region links, we also create a link between each the sub-continental region and the continent it is part of using the pattern</p> <p><code>part of only &lt;continent&gt;</code></p> <p>We again acknowledge that the use of <code>only</code> in OWL axioms is not optimal and are actively looking into alternative design patterns. </p>"},{"location":"ontology_patterns/#country-demonym-links","title":"Country-demonym links","text":"<p>As mentioned in the section on defined classes, we create links between geographic population descriptors for countries and the country they are associated with using the pattern</p> <p><code>isDemonymOf some &lt;country&gt;</code></p>"},{"location":"ontology_patterns/#country-of-origin","title":"Country of origin","text":"<p>In exceptional cases, ancestry categories are associated with countries via the <code>hasCountryOfOrigin</code> relationship. This is a fairly formal definition generally reserved for genetically isolated populations where objectively verifiable information is available to relate individuals from this population to a small geographic area within a certain country. This property is also used to link reference populations to their country of origin, where this is known.</p> <p>It should be noted that the African Population Ontology (AfPO) uses this property more liberally than HANCESTRO to indicate that a population group has a major presence in a given country.</p>"},{"location":"odk-workflows/","title":"Default ODK Workflows","text":"<ul> <li>Daily Editors Workflow</li> <li>Release Workflow</li> <li>Manage your ODK Repository</li> <li>Setting up Docker for ODK</li> <li>Imports management</li> <li>Managing the documentation</li> <li>Managing your Automated Testing</li> </ul>"},{"location":"odk-workflows/ContinuousIntegration/","title":"Introduction to Continuous Integration Workflows with ODK","text":"<p>Historically, most repos have been using Travis CI for continuous integration testing and building, but due to runtime restrictions, we recently switched a lot of our repos to GitHub actions. You can set up your repo with CI by adding  this to your configuration file (src/ontology/hancestro-odk.yaml):</p> <pre><code>ci:\n  - github_actions\n</code></pre> <p>When updateing your repo, you will notice a new file being added: <code>.github/workflows/qc.yml</code>.</p> <p>This file contains your CI logic, so if you need to change, or add anything, this is the place!</p> <p>Alternatively, if your repo is in GitLab instead of GitHub, you can set up your repo with GitLab CI by adding  this to your configuration file (src/ontology/hancestro-odk.yaml):</p> <pre><code>ci:\n  - gitlab-ci\n</code></pre> <p>This will add a file called <code>.gitlab-ci.yml</code> in the root of your repo.</p>"},{"location":"odk-workflows/EditorsWorkflow/","title":"Editors Workflow","text":"<p>The editors workflow is one of the formal workflows to ensure that the ontology is developed correctly according to ontology engineering principles. There are a few different editors workflows:</p> <ol> <li>Local editing workflow: Editing the ontology in your local environment by hand, using tools such as Prot\u00e9g\u00e9, ROBOT templates or DOSDP patterns.</li> <li>Completely automated data pipeline (GitHub Actions)</li> <li>DROID workflow</li> </ol> <p>This document only covers the first editing workflow, but more will be added in the future</p>"},{"location":"odk-workflows/EditorsWorkflow/#local-editing-workflow","title":"Local editing workflow","text":"<p>Workflow requirements:</p> <ul> <li>git</li> <li>github</li> <li>docker</li> <li>editing tool of choice, e.g. Prot\u00e9g\u00e9, your favourite text editor, etc</li> </ul>"},{"location":"odk-workflows/EditorsWorkflow/#1-create-issue","title":"1. Create issue","text":"<p>Ensure that there is a ticket on your issue tracker that describes the change you are about to make. While this seems optional, this is a very important part of the social contract of building an ontology - no change to the ontology should be performed without a good ticket, describing the motivation and nature of the intended change.</p>"},{"location":"odk-workflows/EditorsWorkflow/#2-update-main-branch","title":"2. Update main branch","text":"<p>In your local environment (e.g. your laptop), make sure you are on the <code>main</code> (prev. <code>master</code>) branch and ensure that you have all the upstream changes, for example:</p> <pre><code>git checkout main\ngit pull\n</code></pre>"},{"location":"odk-workflows/EditorsWorkflow/#3-create-feature-branch","title":"3. Create feature branch","text":"<p>Create a new branch. Per convention, we try to use meaningful branch names such as: - issue23removeprocess (where issue 23 is the related issue on GitHub) - issue26addcontributor - release20210101 (for releases)</p> <p>On your command line, this looks like this:</p> <pre><code>git checkout -b issue23removeprocess\n</code></pre>"},{"location":"odk-workflows/EditorsWorkflow/#4-perform-edit","title":"4. Perform edit","text":"<p>Using your editor of choice, perform the intended edit. For example:</p> <p>Prot\u00e9g\u00e9</p> <ol> <li>Open <code>src/ontology/hancestro-edit.owl</code> in Prot\u00e9g\u00e9</li> <li>Make the change</li> <li>Save the file</li> </ol> <p>TextEdit</p> <ol> <li>Open <code>src/ontology/hancestro-edit.owl</code> in TextEdit (or Sublime, Atom, Vim, Nano)</li> <li>Make the change</li> <li>Save the file</li> </ol> <p>Consider the following when making the edit.</p> <ol> <li>According to our development philosophy, the only places that should be manually edited are:<ul> <li><code>src/ontology/hancestro-edit.owl</code></li> <li>Any ROBOT templates you chose to use (the TSV files only)</li> <li>Any DOSDP data tables you chose to use (the TSV files, and potentially the associated patterns)</li> <li>components (anything in <code>src/ontology/components</code>), see here.</li> </ul> </li> <li>Imports should not be edited (any edits will be flushed out with the next update). However, refreshing imports is a potentially breaking change - and is discussed elsewhere.</li> <li>Changes should usually be small. Adding or changing 1 term is great. Adding or changing 10 related terms is ok. Adding or changing 100 or more terms at once should be considered very carefully.</li> </ol>"},{"location":"odk-workflows/EditorsWorkflow/#4-check-the-git-diff","title":"4. Check the Git diff","text":"<p>This step is very important. Rather than simply trusting your change had the intended effect, we should always use a git diff as a first pass for sanity checking.</p> <p>In our experience, having a visual git client like GitHub Desktop or sourcetree is really helpful for this part. In case you prefer the command line:</p> <pre><code>git status\ngit diff\n</code></pre>"},{"location":"odk-workflows/EditorsWorkflow/#5-quality-control","title":"5. Quality control","text":"<p>Now it's time to run your quality control checks. This can either happen locally (5a) or through your continuous integration system (7/5b).</p>"},{"location":"odk-workflows/EditorsWorkflow/#5a-local-testing","title":"5a. Local testing","text":"<p>If you chose to run your test locally:</p> <p><pre><code>sh run.sh make IMP=false test\n</code></pre> This will run the whole set of configured ODK tests on including your change. If you have a complex DOSDP pattern pipeline you may want to add <code>PAT=false</code> to skip the potentially lengthy process of rebuilding the patterns.</p> <pre><code>sh run.sh make IMP=false PAT=false test\n</code></pre>"},{"location":"odk-workflows/EditorsWorkflow/#6-pull-request","title":"6. Pull request","text":"<p>When you are happy with the changes, you commit your changes to your feature branch, push them upstream (to GitHub) and create a pull request. For example:</p> <pre><code>git add NAMEOFCHANGEDFILES\ngit commit -m \"Added biological process term #12\"\ngit push -u origin issue23removeprocess\n</code></pre> <p>Then you go to your project on GitHub, and create a new pull request from the branch, for example: https://github.com/INCATools/ontology-development-kit/pulls</p> <p>There is a lot of great advise on how to write pull requests, but at the very least you should: - mention the tickets affected: <code>see #23</code> to link to a related ticket, or <code>fixes #23</code> if, by merging this pull request, the ticket is fixed. Tickets in the latter case will be closed automatically by GitHub when the pull request is merged. - summarise the changes in a few sentences. Consider the reviewer: what would they want to know right away. - If the diff is large, provide instructions on how to review the pull request best (sometimes, there are many changed files, but only one important change).</p>"},{"location":"odk-workflows/EditorsWorkflow/#75b-continuous-integration-testing","title":"7/5b. Continuous Integration Testing","text":"<p>If you didn't run and local quality control checks (see 5a), you should have Continuous Integration (CI) set up, for example: - Travis - GitHub Actions</p> <p>More on how to set this up here. Once the pull request is created, the CI will automatically trigger. If all is fine, it will show up green, otherwise red.</p>"},{"location":"odk-workflows/EditorsWorkflow/#8-community-review","title":"8. Community review","text":"<p>Once all the automatic tests have passed, it is important to put a second set of eyes on the pull request. Ontologies are inherently social - as in that they represent some kind of community consensus on how a domain is organised conceptually. This seems high brow talk, but it is very important that as an ontology editor, you have your work validated by the community you are trying to serve (e.g. your colleagues, other contributors etc.). In our experience, it is hard to get more than one review on a pull request - two is great. You can set up GitHub branch protection to actually require a review before a pull request can be merged! We recommend this.</p> <p>This step seems daunting to some hopefully under-resourced ontologies, but we recommend to put this high up on your list of priorities - train a colleague, reach out!</p>"},{"location":"odk-workflows/EditorsWorkflow/#9-merge-and-cleanup","title":"9. Merge and cleanup","text":"<p>When the QC is green and the reviews are in (approvals), it is time to merge the pull request. After the pull request is merged, remember to delete the branch as well (this option will show up as a big button right after you have merged the pull request). If you have not done so, close all the associated tickets fixed by the pull request.</p>"},{"location":"odk-workflows/EditorsWorkflow/#10-changelog-optional","title":"10. Changelog (Optional)","text":"<p>It is sometimes difficult to keep track of changes made to an ontology. Some ontology teams opt to document changes in a changelog (simply a text file in your repository) so that when release day comes, you know everything you have changed. This is advisable at least for major changes (such as a new release system, a new pattern or template etc.).</p>"},{"location":"odk-workflows/ManageDocumentation/","title":"Updating the Documentation","text":"<p>The documentation for HANCESTRO is managed in two places (relative to the repository root):</p> <ol> <li>The <code>docs</code> directory contains all the files that pertain to the content of the documentation (more below)</li> <li>the <code>mkdocs.yaml</code> file contains the documentation config, in particular its navigation bar and theme.</li> </ol> <p>The documentation is hosted using GitHub pages, on a special branch of the repository (called <code>gh-pages</code>). It is important that this branch is never deleted - it contains all the files GitHub pages needs to render and deploy the site. It is also important to note that the gh-pages branch should never be edited manually. All changes to the docs happen inside the <code>docs</code> directory on the <code>main</code> branch.</p>"},{"location":"odk-workflows/ManageDocumentation/#editing-the-docs","title":"Editing the docs","text":""},{"location":"odk-workflows/ManageDocumentation/#changing-content","title":"Changing content","text":"<p>All the documentation is contained in the <code>docs</code> directory, and is managed in Markdown. Markdown is a very simple and convenient way to produce text documents with formatting instructions, and is very easy to learn - it is also used, for example, in GitHub issues. This is a normal editing workflow:</p> <ol> <li>Open the <code>.md</code> file you want to change in an editor of choice (a simple text editor is often best). IMPORTANT: Do not edit any files in the <code>docs/odk-workflows/</code> directory. These files are managed by the ODK system and will be overwritten when the repository is upgraded! If you wish to change these files, make an issue on the ODK issue tracker.</li> <li>Perform the edit and save the file</li> <li>Commit the file to a branch, and create a pull request as usual. </li> <li>If your development team likes your changes, merge the docs into main branch.</li> <li>Deploy the documentation (see below)</li> </ol>"},{"location":"odk-workflows/ManageDocumentation/#deploy-the-documentation","title":"Deploy the documentation","text":"<p>The documentation is not automatically updated from the Markdown, and needs to be deployed deliberately. To do this, perform the following steps:</p> <ol> <li>In your terminal, navigate to the edit directory of your ontology, e.g.:    <pre><code>cd hancestro/src/ontology\n</code></pre></li> <li>Now you are ready to build the docs as follows:    <pre><code>sh run.sh make update_docs\n</code></pre> Mkdocs now sets off to build the site from the markdown pages. You will be asked to<ul> <li>Enter your username</li> <li>Enter your password (see here for using GitHub access tokens instead)   IMPORTANT: Using password based authentication will be deprecated this year (2021). Make sure you read up on personal access tokens if that happens!</li> </ul> </li> </ol> <p>If everything was successful, you will see a message similar to this one:</p> <p><pre><code>INFO    -  Your documentation should shortly be available at: https://ebispot.github.io/hancestro/ \n</code></pre> 3. Just to double check, you can now navigate to your documentation pages (usually https://ebispot.github.io/hancestro/).     Just make sure you give GitHub 2-5 minutes to build the pages!</p>"},{"location":"odk-workflows/ReleaseWorkflow/","title":"The release workflow","text":"<p>The release workflow recommended by the ODK is based on GitHub releases and works as follows:</p> <ol> <li>Run a release with the ODK</li> <li>Review the release</li> <li>Merge to main branch</li> <li>Create a GitHub release</li> </ol> <p>These steps are outlined in detail in the following.</p>"},{"location":"odk-workflows/ReleaseWorkflow/#run-a-release-with-the-odk","title":"Run a release with the ODK","text":"<p>Preparation:</p> <ol> <li>Ensure that all your pull requests are merged into your main (master) branch</li> <li>Make sure that all changes to main are committed to GitHub (<code>git status</code> should say that there are no modified files)</li> <li>Locally make sure you have the latest changes from main (<code>git pull</code>)</li> <li>Checkout a new branch (e.g. <code>git checkout -b release-2021-01-01</code>)</li> <li>You may or may not want to refresh your imports as part of your release strategy (see here)</li> <li>Make sure you have the latest ODK installed by running <code>docker pull obolibrary/odkfull</code></li> </ol> <p>To actually run the release, you:</p> <ol> <li>Open a command line terminal window and navigate to the src/ontology directory (<code>cd hancestro/src/ontology</code>)</li> <li>Run release pipeline:<code>sh run.sh make prepare_release -B</code>. Note that for some ontologies, this process can take up to 90 minutes - especially if there are large ontologies you depend on, like PRO or CHEBI.</li> <li>If everything went well, you should see the following output on your machine: <code>Release files are now in ../.. - now you should commit, push and make a release on your git hosting site such as GitHub or GitLab</code>.</li> </ol> <p>This will create all the specified release targets (OBO, OWL, JSON, and the variants, ont-full and ont-base) and copy them into your release directory (the top level of your repo).</p>"},{"location":"odk-workflows/ReleaseWorkflow/#review-the-release","title":"Review the release","text":"<ol> <li>(Optional) Rough check. This step is frequently skipped, but for the more paranoid among us (like the author of this doc), this is a 3 minute additional effort for some peace of mind. Open the main release (hancestro.owl) in you favourite development environment (i.e. Prot\u00e9g\u00e9) and eyeball the hierarchy. We recommend two simple checks: <ol> <li>Does the very top level of the hierarchy look ok? This means that all new terms have been imported/updated correctly.</li> <li>Does at least one change that you know should be in this release appear? For example, a new class. This means that the release was actually based on the recent edit file. </li> </ol> </li> <li>Commit your changes to the branch and make a pull request</li> <li>In your GitHub pull request, review the following three files in detail (based on our experience):<ol> <li><code>hancestro.obo</code> - this reflects a useful subset of the whole ontology (everything that can be covered by OBO format). OBO format has that speaking for it: it is very easy to review!</li> <li><code>hancestro-base.owl</code> - this reflects the asserted axioms in your ontology that you have actually edited.</li> <li>Ideally also take a look at <code>hancestro-full.owl</code>, which may reveal interesting new inferences you did not know about. Note that the diff of this file is sometimes quite large.</li> </ol> </li> <li>Like with every pull request, we recommend to always employ a second set of eyes when reviewing a PR!</li> </ol>"},{"location":"odk-workflows/ReleaseWorkflow/#merge-the-main-branch","title":"Merge the main branch","text":"<p>Once your CI checks have passed, and your reviews are completed, you can now merge the branch into your main branch (don't forget to delete the branch afterwards - a big button will appear after the merge is finished).</p>"},{"location":"odk-workflows/ReleaseWorkflow/#create-a-github-release","title":"Create a GitHub release","text":"<ol> <li>Go to your releases page on GitHub by navigating to your repository, and then clicking on releases (usually on the right, for example: https://github.com/ebispot/hancestro/releases). Then click \"Draft new release\"</li> <li>As the tag version you need to choose the date on which your ontologies were build. You can find this, for example, by looking at the <code>hancestro.obo</code> file and check the <code>data-version:</code> property. The date needs to be prefixed with a <code>v</code>, so, for example <code>v2020-02-06</code>.</li> <li>You can write whatever you want in the release title, but we typically write the date again. The description underneath should contain a concise list of changes or term additions.</li> <li>Click \"Publish release\". Done.</li> </ol>"},{"location":"odk-workflows/ReleaseWorkflow/#debugging-typical-ontology-release-problems","title":"Debugging typical ontology release problems","text":""},{"location":"odk-workflows/ReleaseWorkflow/#problems-with-memory","title":"Problems with memory","text":"<p>When you are dealing with large ontologies, you need a lot of memory. When you see error messages relating to large ontologies such as CHEBI, PRO, NCBITAXON, or Uberon, you should think of memory first, see here.</p>"},{"location":"odk-workflows/ReleaseWorkflow/#problems-when-using-obo-format-based-tools","title":"Problems when using OBO format based tools","text":"<p>Sometimes you will get cryptic error messages when using legacy tools using OBO format, such as the ontology release tool (OORT), which is also available as part of the ODK docker container. In these cases, you need to track down what axiom or annotation actually caused the breakdown. In our experience (in about 60% of the cases) the problem lies with duplicate annotations (<code>def</code>, <code>comment</code>) which are illegal in OBO. Here is an example recipe of how to deal with such a problem:</p> <ol> <li>If you get a message like <code>make: *** [cl.Makefile:84: oort] Error 255</code> you might have a OORT error. </li> <li>To debug this, in your terminal enter <code>sh run.sh make IMP=false PAT=false oort -B</code> (assuming you are already in the ontology folder in your directory) </li> <li>This should show you where the error is in the log (eg multiple different definitions)  WARNING: THE FIX BELOW IS NOT IDEAL, YOU SHOULD ALWAYS TRY TO FIX UPSTREAM IF POSSIBLE</li> <li>Open <code>hancestro-edit.owl</code> in Prot\u00e9g\u00e9 and find the offending term and delete all offending issue (e.g. delete ALL definition, if the problem was \"multiple def tags not allowed\") and save.  *While this is not idea, as it will remove all definitions from that term, it will be added back again when the term is fixed in the ontology it was imported from and added back in.</li> <li>Rerun <code>sh run.sh make IMP=false PAT=false oort -B</code> and if it all passes, commit your changes to a branch and make a pull request as usual.</li> </ol>"},{"location":"odk-workflows/RepoManagement/","title":"Managing your ODK repository","text":""},{"location":"odk-workflows/RepoManagement/#updating-your-odk-repository","title":"Updating your ODK repository","text":"<p>Your ODK repositories configuration is managed in <code>src/ontology/hancestro-odk.yaml</code>. The ODK Project Configuration Schema defines all possible parameters that can be used in this config YAML. Once you have made your changes, you can run the following to apply your changes to the repository:</p> <pre><code>sh run.sh make update_repo\n</code></pre> <p>There are a large number of options that can be set to configure your ODK, but we will only discuss a few of them here.</p> <p>NOTE for Windows users:</p> <p>You may get a cryptic failure such as <code>Set Illegal Option -</code> if the update script located in <code>src/scripts/update_repo.sh</code>  was saved using Windows Line endings. These need to change to unix line endings. In Notepad++, for example, you can  click on Edit-&gt;EOL Conversion-&gt;Unix LF to change this.</p>"},{"location":"odk-workflows/RepoManagement/#managing-imports","title":"Managing imports","text":"<p>You can use the update repository workflow described on this page to perform the following operations to your imports:</p> <ol> <li>Add a new import</li> <li>Modify an existing import</li> <li>Remove an import you no longer want</li> <li>Customise an import</li> </ol> <p>We will discuss all these workflows in the following.</p>"},{"location":"odk-workflows/RepoManagement/#add-new-import","title":"Add new import","text":"<p>To add a new import, you first edit your odk config as described above, adding an <code>id</code> to the <code>product</code> list in the <code>import_group</code> section (for the sake of this example, we assume you already import RO, and your goal is to also import GO):</p> <pre><code>import_group:\n  products:\n    - id: ro\n    - id: go\n</code></pre> <p>Note: our ODK file should only have one <code>import_group</code> which can contain multiple imports (in the <code>products</code> section). Next, you run the update repo workflow to apply these changes. Note that by default, this module is going to be a SLME Bottom module, see here. To change that or customise your module, see section \"Customise an import\". To finalise the addition of your import, perform the following steps:</p> <ol> <li>Add an import statement to your <code>src/ontology/hancestro-edit.owl</code> file. We suggest to do this using a text editor, by simply copying an existing import declaration and renaming it to the new ontology import, for example as follows:     <pre><code>...\nOntology(&lt;http://purl.obolibrary.org/obo/hancestro.owl&gt;\nImport(&lt;http://purl.obolibrary.org/obo/hancestro/imports/ro_import.owl&gt;)\nImport(&lt;http://purl.obolibrary.org/obo/hancestro/imports/go_import.owl&gt;)\n...\n</code></pre></li> <li>Add your imports redirect to your catalog file <code>src/ontology/catalog-v001.xml</code>, for example:     <pre><code>&lt;uri name=\"http://purl.obolibrary.org/obo/hancestro/imports/go_import.owl\" uri=\"imports/go_import.owl\"/&gt;\n</code></pre></li> <li>Test whether everything is in order:<ol> <li>Refresh your import</li> <li>Open in your Ontology Editor of choice (Protege) and ensure that the expected terms are imported.</li> </ol> </li> </ol> <p>Note: The catalog file <code>src/ontology/catalog-v001.xml</code> has one purpose: redirecting  imports from URLs to local files. For example, if you have</p> <pre><code>Import(&lt;http://purl.obolibrary.org/obo/hancestro/imports/go_import.owl&gt;)\n</code></pre> <p>in your editors file (the ontology) and</p> <pre><code>&lt;uri name=\"http://purl.obolibrary.org/obo/hancestro/imports/go_import.owl\" uri=\"imports/go_import.owl\"/&gt;\n</code></pre> <p>in your catalog, tools like <code>robot</code> or Prot\u00e9g\u00e9 will recognize the statement in the catalog file to redirect the URL <code>http://purl.obolibrary.org/obo/hancestro/imports/go_import.owl</code> to the local file <code>imports/go_import.owl</code> (which is in your <code>src/ontology</code> directory).</p>"},{"location":"odk-workflows/RepoManagement/#modify-an-existing-import","title":"Modify an existing import","text":"<p>If you simply wish to refresh your import in light of new terms, see here. If you wish to change the type of your module see section \"Customise an import\".</p>"},{"location":"odk-workflows/RepoManagement/#remove-an-existing-import","title":"Remove an existing import","text":"<p>To remove an existing import, perform the following steps:</p> <ol> <li>remove the import declaration from your <code>src/ontology/hancestro-edit.owl</code>.</li> <li>remove the id from your <code>src/ontology/hancestro-odk.yaml</code>, eg. <code>- id: go</code> from the list of <code>products</code> in the <code>import_group</code>.</li> <li>run update repo workflow</li> <li>delete the associated files manually:<ul> <li><code>src/imports/go_import.owl</code></li> <li><code>src/imports/go_terms.txt</code></li> </ul> </li> <li>Remove the respective entry from the <code>src/ontology/catalog-v001.xml</code> file.</li> </ol>"},{"location":"odk-workflows/RepoManagement/#customise-an-import","title":"Customise an import","text":"<p>By default, an import module extracted from a source ontology will be a SLME module, see here. There are various options to change the default.</p> <p>The following change to your repo config (<code>src/ontology/hancestro-odk.yaml</code>) will switch the go import from an SLME module to a simple ROBOT filter module:</p> <pre><code>import_group:\n  products:\n    - id: ro\n    - id: go\n      module_type: filter\n</code></pre> <p>A ROBOT filter module is, essentially, importing all external terms declared by your ontology (see here on how to declare external terms to be imported). Note that the <code>filter</code> module does  not consider terms/annotations from namespaces other than the base-namespace of the ontology itself. For example, in the example of GO above, only annotations / axioms related to the GO base IRI (http://purl.obolibrary.org/obo/GO_) would be considered. This  behaviour can be changed by adding additional base IRIs as follows:</p> <pre><code>import_group:\n  products:\n    - id: go\n      module_type: filter\n      base_iris:\n        - http://purl.obolibrary.org/obo/GO_\n        - http://purl.obolibrary.org/obo/CL_\n        - http://purl.obolibrary.org/obo/BFO\n</code></pre> <p>If you wish to customise your import entirely, you can specify your own ROBOT command to do so. To do that, add the following to your repo config (<code>src/ontology/hancestro-odk.yaml</code>):</p> <pre><code>import_group:\n  products:\n    - id: ro\n    - id: go\n      module_type: custom\n</code></pre> <p>Now add a new goal in your custom Makefile (<code>src/ontology/hancestro.Makefile</code>, not <code>src/ontology/Makefile</code>).</p> <pre><code>imports/go_import.owl: mirror/ro.owl imports/ro_terms_combined.txt\n    if [ $(IMP) = true ]; then $(ROBOT) query  -i $&lt; --update ../sparql/preprocess-module.ru \\\n        extract -T imports/ro_terms_combined.txt --force true --individuals exclude --method BOT \\\n        query --update ../sparql/inject-subset-declaration.ru --update ../sparql/postprocess-module.ru \\\n        annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) --output $@.tmp.owl &amp;&amp; mv $@.tmp.owl $@; fi\n</code></pre> <p>Now feel free to change this goal to do whatever you wish it to do! It probably makes some sense (albeit not being a strict necessity), to leave most of the goal instead and replace only:</p> <pre><code>extract -T imports/ro_terms_combined.txt --force true --individuals exclude --method BOT \\\n</code></pre> <p>to another ROBOT pipeline.</p>"},{"location":"odk-workflows/RepoManagement/#add-a-component","title":"Add a component","text":"<p>A component is an import which belongs to your ontology, e.g. is managed by  you and your team. </p> <ol> <li>Open <code>src/ontology/hancestro-odk.yaml</code></li> <li>If you dont have it yet, add a new top level section <code>components</code></li> <li>Under the <code>components</code> section, add a new section called <code>products</code>.  This is where all your components are specified</li> <li>Under the <code>products</code> section, add a new component, e.g. <code>- filename: mycomp.owl</code></li> </ol> <p>Example</p> <pre><code>components:\n  products:\n    - filename: mycomp.owl\n</code></pre> <p>When running <code>sh run.sh make update_repo</code>, a new file <code>src/ontology/components/mycomp.owl</code> will  be created which you can edit as you see fit. Typical ways to edit:</p> <ol> <li>Using a ROBOT template to generate the component (see below)</li> <li>Manually curating the component separately with Prot\u00e9g\u00e9 or any other editor</li> <li>Providing a <code>components/mycomp.owl:</code> make target in <code>src/ontology/hancestro.Makefile</code> and provide a custom command to generate the component<ul> <li><code>WARNING</code>: Note that the custom rule to generate the component MUST NOT depend on any other ODK-generated file such as seed files and the like (see issue).</li> </ul> </li> <li>Providing an additional attribute for the component in <code>src/ontology/hancestro-odk.yaml</code>, <code>source</code>, to specify that this component should simply be downloaded from somewhere on the web.</li> </ol>"},{"location":"odk-workflows/RepoManagement/#adding-a-new-component-based-on-a-robot-template","title":"Adding a new component based on a ROBOT template","text":"<p>Since ODK 1.3.2, it is possible to simply link a ROBOT template to a component without having to specify any of the import logic. In order to add a new component that is connected to one or more template files, follow these steps:</p> <ol> <li>Open <code>src/ontology/hancestro-odk.yaml</code>.</li> <li>Make sure that <code>use_templates: TRUE</code> is set in the global project options. You should also make sure that <code>use_context: TRUE</code> is set in case you are using prefixes in your templates that are not known to <code>robot</code>, such as <code>OMOP:</code>, <code>CPONT:</code> and more. All non-standard prefixes you are using should be added to <code>config/context.json</code>.</li> <li>Add another component to the <code>products</code> section.</li> <li>To activate this component to be template-driven, simply say: <code>use_template: TRUE</code>. This will create an empty template for you in the templates directory, which will automatically be processed when recreating the component (e.g. <code>run.bat make recreate-mycomp</code>).</li> <li>If you want to use more than one component, use the <code>templates</code> field to add as many template names as you wish. ODK will look for them in the <code>src/templates</code> directory.</li> <li>Advanced: If you want to provide additional processing options, you can use the <code>template_options</code> field. This should be a string with option from robot template. One typical example for additional options you may want to provide is <code>--add-prefixes config/context.json</code> to ensure the prefix map of your context is provided to <code>robot</code>, see above.</li> </ol> <p>Example:</p> <pre><code>components:\n  products:\n    - filename: mycomp.owl\n      use_template: TRUE\n      template_options: --add-prefixes config/context.json\n      templates:\n        - template1.tsv\n        - template2.tsv\n</code></pre> <p>Note: if your mirror is particularly large and complex, read this ODK recommendation.</p>"},{"location":"odk-workflows/RepositoryFileStructure/","title":"Repository structure","text":"<p>The main kinds of files in the repository:</p> <ol> <li>Release files</li> <li>Imports</li> <li>Components</li> </ol>"},{"location":"odk-workflows/RepositoryFileStructure/#release-files","title":"Release files","text":"<p>Release file are the file that are considered part of the official ontology release and to be used by the community. A detailed description of the release artefacts can be found here.</p>"},{"location":"odk-workflows/RepositoryFileStructure/#imports","title":"Imports","text":"<p>Imports are subsets of external ontologies that contain terms and axioms you would like to re-use in your ontology. These are considered \"external\", like dependencies in software development, and are not included in your \"base\" product, which is the release artefact which contains only those axioms that you personally maintain.</p> <p>These are the current imports in HANCESTRO</p> Import URL Type obi http://purl.obolibrary.org/obo/obi.owl custom bfo http://purl.obolibrary.org/obo/bfo.owl slme ro http://purl.obolibrary.org/obo/ro.owl None afpo http://purl.obolibrary.org/obo/afpo.owl custom"},{"location":"odk-workflows/RepositoryFileStructure/#components","title":"Components","text":"<p>Components, in contrast to imports, are considered full members of the ontology. This means that any axiom in a component is also included in the ontology base - which means it is considered native to the ontology. While this sounds complicated, consider this: conceptually, no component should be part of more than one ontology. If that seems to be the case, we are most likely talking about an import. Components are often not needed for ontologies, but there are some use cases:</p> <ol> <li>There is an automated process that generates and re-generates a part of the ontology</li> <li>A part of the ontology is managed in ROBOT templates</li> <li>The expressivity of the component is higher than the format of the edit file. For example, people still choose to manage their ontology in OBO format (they should not) missing out on a lot of owl features. They may choose to manage logic that is beyond OBO in a specific OWL component.</li> </ol> <p>These are the components in HANCESTRO</p> Filename URL gaz_xrefs.owl None dbpedia_geography.owl None afpo_annotations.owl None"},{"location":"odk-workflows/SettingUpDockerForODK/","title":"Setting up your Docker environment for ODK use","text":"<p>One of the most frequent problems with running the ODK for the first time is failure because of lack of memory. This can look like a Java OutOfMemory exception,  but more often than not it will appear as something like an <code>Error 137</code>. There are two places you need to consider to set your memory:</p> <ol> <li>Your src/ontology/run.sh (or run.bat) file. You can set the memory in there by adding  <code>robot_java_args: '-Xmx8G'</code> to your src/ontology/hancestro-odk.yaml file, see for example here.</li> <li>Set your docker memory. By default, it should be about 10-20% more than your <code>robot_java_args</code> variable. You can manage your memory settings by right-clicking on the docker whale in your system bar--&gt;Preferences--&gt;Resources--&gt;Advanced, see picture below.</li> </ol> <p></p>"},{"location":"odk-workflows/UpdateImports/","title":"Update Imports Workflow","text":"<p>This page discusses how to update the contents of your imports, like adding or removing terms. If you are looking to customise imports, like changing the module type, see here.</p>"},{"location":"odk-workflows/UpdateImports/#importing-a-new-term","title":"Importing a new term","text":"<p>Note: some ontologies now use a merged-import system to manage dynamic imports, for these please follow instructions in the section title \"Using the Base Module approach\".</p> <p>Importing a new term is split into two sub-phases:</p> <ol> <li>Declaring the terms to be imported</li> <li>Refreshing imports dynamically</li> </ol>"},{"location":"odk-workflows/UpdateImports/#declaring-terms-to-be-imported","title":"Declaring terms to be imported","text":"<p>There are three ways to declare terms that are to be imported from an external ontology. Choose the appropriate one for your particular scenario (all three can be used in parallel if need be):</p> <ol> <li>Prot\u00e9g\u00e9-based declaration</li> <li>Using term files</li> <li>Using the custom import template</li> </ol>"},{"location":"odk-workflows/UpdateImports/#protege-based-declaration","title":"Prot\u00e9g\u00e9-based declaration","text":"<p>This workflow is to be avoided, but may be appropriate if the editor does not have access to the ODK docker container.  This approach also applies to ontologies that use base module import approach.</p> <ol> <li>Open your ontology (edit file) in Prot\u00e9g\u00e9 (5.5+).</li> <li>Select 'owl:Thing'</li> <li>Add a new class as usual.</li> <li>Paste the full iri in the 'Name:' field, for example, http://purl.obolibrary.org/obo/CHEBI_50906.</li> <li>Click 'OK'</li> </ol> <p></p> <p>Now you can use this term for example to construct logical definitions. The next time the imports are refreshed (see how to refresh here), the metadata (labels, definitions, etc.) for this term are imported from the respective external source ontology and becomes visible in your ontology.</p>"},{"location":"odk-workflows/UpdateImports/#using-term-files","title":"Using term files","text":"<p>Every import has, by default a term file associated with it, which can be found in the imports directory. For example, if you have a GO import in <code>src/ontology/go_import.owl</code>, you will also have an associated term file <code>src/ontology/go_terms.txt</code>. You can add terms in there simply as a list:</p> <pre><code>GO:0008150\nGO:0008151\n</code></pre> <p>Now you can run the refresh imports workflow) and the two terms will be imported.</p>"},{"location":"odk-workflows/UpdateImports/#using-the-custom-import-template","title":"Using the custom import template","text":"<p>This workflow is appropriate if:</p> <ol> <li>You prefer to manage all your imported terms in a single file (rather than multiple files like in the \"Using term files\" workflow above).</li> <li>You wish to augment your imported ontologies with additional information. This requires a cautionary discussion.</li> </ol> <p>To enable this workflow, you add the following to your ODK config file (<code>src/ontology/hancestro-odk.yaml</code>), and update the repository:</p> <pre><code>use_custom_import_module: TRUE\n</code></pre> <p>Now you can manage your imported terms directly in the custom external terms template, which is located at <code>src/templates/external_import.owl</code>. Note that this file is a ROBOT template, and can, in principle, be extended to include any axioms you like. Before extending the template, however, read the following carefully.</p> <p>The main purpose of the custom import template is to enable the management off all terms to be imported in a centralised place. To enable that, you do not have to do anything other than maintaining the template. So if you, say currently import <code>APOLLO_SV:00000480</code>, and you wish to import <code>APOLLO_SV:00000532</code>, you simply add a row like this:</p> <pre><code>ID  Entity Type\nID  TYPE\nAPOLLO_SV:00000480  owl:Class\nAPOLLO_SV:00000532  owl:Class\n</code></pre> <p>When the imports are refreshed see imports refresh workflow, the term(s) will simply be imported from the configured ontologies.</p> <p>Now, if you wish to extend the Makefile (which is beyond these instructions) and add, say, synonyms to the imported terms, you can do that, but you need to (a) preserve the <code>ID</code> and <code>ENTITY</code> columns and (b) ensure that the ROBOT template is valid otherwise, see here.</p> <p>WARNING. Note that doing this is a widespread antipattern (see related issue). You should not change the axioms of terms that do not belong into your ontology unless necessary - such changes should always be pushed into the ontology where they belong. However, since people are doing it, whether the OBO Foundry likes it or not, at least using the custom imports module as described here localises the changes to a single simple template and ensures that none of the annotations added this way are merged into the base file.  </p>"},{"location":"odk-workflows/UpdateImports/#refresh-imports","title":"Refresh imports","text":"<p>If you want to refresh the import yourself (this may be necessary to pass the travis tests), and you have the ODK installed, you can do the following (using go as an example):</p> <p>First, you navigate in your terminal to the ontology directory (underneath src in your hpo root directory).  <pre><code>cd src/ontology\n</code></pre></p> <p>Then, you regenerate the import that will now include any new terms you have added. Note: You must have docker installed.</p> <pre><code>sh run.sh make PAT=false imports/go_import.owl -B\n</code></pre> <p>Since ODK 1.2.27, it is also possible to simply run the following, which is the same as the above:</p> <pre><code>sh run.sh make refresh-go\n</code></pre> <p>Note that in case you changed the defaults, you need to add <code>IMP=true</code> and/or <code>MIR=true</code> to the command below:</p> <pre><code>sh run.sh make IMP=true MIR=true PAT=false imports/go_import.owl -B\n</code></pre> <p>If you wish to skip refreshing the mirror, i.e. skip downloading the latest version of the source ontology for your import (e.g. <code>go.owl</code> for your go import) you can set <code>MIR=false</code> instead, which will do the exact same thing as the above, but is easier to remember:</p> <pre><code>sh run.sh make IMP=true MIR=false PAT=false imports/go_import.owl -B\n</code></pre>"},{"location":"odk-workflows/UpdateImports/#using-the-base-module-approach","title":"Using the Base Module approach","text":"<p>Since ODK 1.2.31, we support an entirely new approach to generate modules: Using base files. The idea is to only import axioms from ontologies that actually belong to it.  A base file is a subset of the ontology that only contains those axioms that nominally  belong there. In other words, the base file does not contain any axioms that belong to another ontology. An example would be this:</p> <p>Imagine this being the full Uberon ontology:</p> <pre><code>Axiom 1: BFO:123 SubClassOf BFO:124\nAxiom 1: UBERON:123 SubClassOf BFO:123\nAxiom 1: UBERON:124 SubClassOf UBERON 123\n</code></pre> <p>The base file is the set of all axioms that are about UBERON terms:</p> <pre><code>Axiom 1: UBERON:123 SubClassOf BFO:123\nAxiom 1: UBERON:124 SubClassOf UBERON 123\n</code></pre> <p>I.e.</p> <pre><code>Axiom 1: BFO:123 SubClassOf BFO:124\n</code></pre> <p>Gets removed.</p> <p>The base file pipeline is a bit more complex than the normal pipelines, because of the logical interactions between the imported ontologies. This is solved by _first  merging all mirrors into one huge file and then extracting one mega module from it.</p> <p>Example: Let's say we are importing terms from Uberon, GO and RO in our ontologies. When we use the base pipelines, we</p> <p>1) First obtain the base (usually by simply downloading it, but there is also an option now to create it with ROBOT) 2) We merge all base files into one big pile 3) Then we extract a single module <code>imports/merged_import.owl</code></p> <p>The first implementation of this pipeline is PATO, see https://github.com/pato-ontology/pato/blob/master/src/ontology/pato-odk.yaml.</p> <p>To check if your ontology uses this method, check src/ontology/hancestro-odk.yaml to see if <code>use_base_merging: TRUE</code> is declared under <code>import_group</code></p> <p>If your ontology uses Base Module approach, please use the following steps: </p> <p>First, add the term to be imported to the term file associated with it (see above \"Using term files\" section if this is not clear to you)</p> <p>Next, you navigate in your terminal to the ontology directory (underneath src in your hpo root directory).  <pre><code>cd src/ontology\n</code></pre></p> <p>Then refresh imports by running</p> <p><pre><code>sh run.sh make imports/merged_import.owl\n</code></pre> Note: if your mirrors are updated, you can run <code>sh run.sh make no-mirror-refresh-merged</code></p> <p>This requires quite a bit of memory on your local machine, so if you encounter an error, it might be a lack of memory on your computer. A solution would be to create a ticket in an issue tracker requesting for the term to be imported, and one of the local devs should pick this up and run the import for you.</p> <p>Lastly, restart Prot\u00e9g\u00e9, and the term should be imported in ready to be used.</p>"},{"location":"odk-workflows/components/","title":"Adding components to an ODK repo","text":"<p>For details on what components are, please see component section of repository file structure document.</p> <p>To add custom components to an ODK repo, please follow the following steps:</p> <p>1) Locate your odk yaml file and open it with your favourite text editor (src/ontology/hancestro-odk.yaml) 2) Search if there is already a component section to the yaml file, if not add it accordingly, adding the name of your component:</p> <pre><code>components:\n  products:\n    - filename: your-component-name.owl\n</code></pre> <p>3) Add the component to your catalog file (src/ontology/catalog-v001.xml)</p> <pre><code>  &lt;uri name=\"http://purl.obolibrary.org/obo/hancestro/components/your-component-name.owl\" uri=\"components/your-component-name.owl\"/&gt;\n</code></pre> <p>4) Add the component to the edit file (src/ontology/hancestro-edit.obo) for .obo formats: </p> <pre><code>import: http://purl.obolibrary.org/obo/hancestro/components/your-component-name.owl\n</code></pre> <p>for .owl formats: </p> <pre><code>Import(&lt;http://purl.obolibrary.org/obo/hancestro/components/your-component-name.owl&gt;)\n</code></pre> <p>5) Refresh your repo by running <code>sh run.sh make update_repo</code> - this should create a new file in src/ontology/components. 6) In your custom makefile (src/ontology/hancestro.Makefile) add a goal for your custom make file. In this example, the goal is a ROBOT template.</p> <pre><code>$(COMPONENTSDIR)/your-component-name.owl: $(SRC) ../templates/your-component-template.tsv \n    $(ROBOT) template --template ../templates/your-component-template.tsv \\\n  annotate --ontology-iri $(ONTBASE)/$@ --output $(COMPONENTSDIR)/your-component-name.owl\n</code></pre> <p>(If using a ROBOT template, do not forget to add your template tsv in src/templates/)</p> <p>7) Make the file by running <code>sh run.sh make components/your-component-name.owl</code></p>"}]}